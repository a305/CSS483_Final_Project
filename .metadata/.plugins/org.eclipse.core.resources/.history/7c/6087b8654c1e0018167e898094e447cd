package com.uwb.bt2j.util.pattern;

import com.uwb.bt2j.aligner.Read;
import com.uwb.bt2j.util.EList;

public class VectorPatternSource extends PatternSource{
	private double cur_;
	private double skip_;
	private boolean paired_;
	private EList<String> tokbuf_;
	private String nametmp;
	
	public VectorPatternSource(PatternParams p, EList<String> seqs) {
		super(p);
		cur_ = p.skip;
		skip_ = p.skip;
		paired_ = false;
		
		// Install sequences in buffers, ready for immediate copying in
		// nextBatch().  Formatting of the buffer is just like
		// TabbedPatternSource.
		int seqslen = seqs.size();
		for(int i = 0; i < seqslen; i++) {
			tokbuf_.clear();
			tokenize(seqs[i], ":", tokbuf_, 2);
			// Get another buffer ready
			bufs_.expand();
			bufs_.back().clear();
			// Install name
			nametmp_ = (long) i;
			bufs_.back().install(nametmp_);
			bufs_.back().append('\t');
			// Install sequence
			bufs_.back().append(tokbuf_[0].c_str());
			bufs_.back().append('\t');
			// Install qualities
			if(tokbuf_.size() > 1) {
				bufs_.back().append(tokbuf_[1].c_str());
			} else {
				const size_t len = tokbuf_[0].length();
				for(size_t i = 0; i < len; i++) {
					bufs_.back().append('I');
				}
			}
		}
	}
	
	private Pair<boolean, int> nextBatchImpl(PerThreadReadBuf pt, boolean batch_a) {
		
	}
	
	@Override
	public void nextBatch(PerThreadReadBuf pt, boolean batch_a, boolean lock) {
		
	}

	@Override
	public boolean parse(Read ra, Read rb, long rdid) {

	}

	@Override
	public void reset() {
		readCnt_ = 0;
		cur_ = skip_;
		paired_ = false;
	}
}
