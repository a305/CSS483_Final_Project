package com.uwb.bt2j.aligner.dp;
class DynamicProgrammingFramer {
  protected boolean trimToRef_;
  
  public DynamicProgrammingFramer(boolean trimToRef) {
	  trimToRef_ = trimToRef;
  }
  
  public boolean frameSeedExtensionRect(
		  long  off,      // ref offset implied by seed hit assuming no gaps
			double   rdlen,    // length of read sequence used in DP table
			long  reflen,   // length of reference sequence aligned to
			double   maxrdgap, // max # of read gaps permitted in opp mate alignment
			double   maxrfgap, // max # of ref gaps permitted in opp mate alignment
			long  maxns,    // # Ns permitted
			double   maxhalf,  // max width in either direction
			DPRect  rect) {
    
  }
  
  public boolean frameFindMateRect(
		  boolean anchorLeft,  // true iff anchor alignment is to the left
			long ll,       // leftmost Watson off for LHS of opp alignment
			long lr,       // rightmost Watson off for LHS of opp alignment
			long rl,       // leftmost Watson off for RHS of opp alignment
			long rr,       // rightmost Watson off for RHS of opp alignment
			double  rdlen,    // length of opposite mate
			long reflen,   // length of reference sequence aligned to
			double  maxrdgap, // max # of read gaps permitted in opp mate alignment
			double  maxrfgap, // max # of ref gaps permitted in opp mate alignment
			long maxns,    // max # Ns permitted
			double  maxhalf,  // max width in either direction
			DPRect rect  
		  ) {
		if(anchorLeft) {
			return frameFindMateAnchorLeftRect(
				ll,
				lr,
				rl,
				rr,
				rdlen,
				reflen,
				maxrdgap,
				maxrfgap,
				maxns,
				maxhalf,
				rect);
		} else {
			return frameFindMateAnchorRightRect(
				ll,
				lr,
				rl,
				rr,
				rdlen,
				reflen,
				maxrdgap,
				maxrfgap,
				maxns,
				maxhalf,
				rect);
		}
  }
  
  public Boolean frameFindMateAnchorLeftRect(
		  long ll,       // leftmost Watson off for LHS of opp alignment
			long lr,       // rightmost Watson off for LHS of opp alignment
			long rl,       // leftmost Watson off for RHS of opp alignment
			long rr,       // rightmost Watson off for RHS of opp alignment
			double  rdlen,    // length of opposite mate
			long reflen,   // length of reference sequence aligned to
			double  maxrdgap, // max # of read gaps permitted in opp mate alignment
			double  maxrfgap, // max # of ref gaps permitted in opp mate alignment
			long maxns,    // max # Ns permitted in alignment
			double  maxhalf,  // max width in either direction
			DPRect rect)     // out: DP rectangle
  {
    
  }
  
  public Boolean frameFindMateAnchorRightRect(
		  long ll,       // leftmost Watson off for LHS of opp alignment
			long lr,       // rightmost Watson off for LHS of opp alignment
			long rl,       // leftmost Watson off for RHS of opp alignment
			long rr,       // rightmost Watson off for RHS of opp alignment
			double  rdlen,    // length of opposite mate
			long reflen,   // length of reference sequence aligned to
			double  maxrdgap, // max # of read gaps permitted in opp mate alignment
			double  maxrfgap, // max # of ref gaps permitted in opp mate alignment
			long maxns,    // max # Ns permitted in alignment
			double  maxhalf,  // max width in either direction
			DPRect rect)     // out: DP rectangle
  {
    
  }
  
  protected void trimToRef(
			double   reflen,  // in: length of reference sequence aligned to
			long refl,    // in/out: ref pos of upper LHS of parallelogram
			long refr,    // in/out: ref pos of lower RHS of parallelogram
			double  trimup,  // out: number of bases trimmed from upstream end
			double  trimdn)  // out: number of bases trimmed from downstream end
  {
		if(refl < 0) {
			trimup = (double)(-refl);
			//refl = 0;
		}
		if(refr >= (long)reflen) {
			trimdn = (double)(refr - reflen + 1);
			//refr = (long)reflen-1;
		}
  }
}
