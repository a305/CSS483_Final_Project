package com.uwb.bt2j.indexer;

import org.omg.CORBA_2_3.portable.OutputStream;

import com.uwb.bt2j.util.IndexTypes;

public class BlockwiseSA <TStr> {
	
	public BlockwiseSA(
			TStr __text,
            long __bucketSz,
            bool __sanityCheck,
            bool __passMemExc,
            bool __verbose,
            OutputStream __logger){
		_text = __text;
		_bucketSz = Math.max(__bucketSz, 2);
		_sanityCheck = __sanityCheck;
		_passMemExc = __passMemExc;
		_verbose = __verbose;
		_itrBucket = 2;
		_itrBucketPos = IndexTypes.OFF_MASK;
		_itrPushedBackSuffix = IndexTypes.OFF_MASK;
		_logger = __logger;
	}
	
	public boolean hasMoreSuffixes() {
		if(_itrPushedBackSuffix != OFF_MASK) return true;
			_itrPushedBackSuffix = nextSuffix();
		return true;
	}
	
	public void resetSuffixItr() {
		_itrBucket.clear();
		_itrBucketPos = OFF_MASK;
		_itrPushedBackSuffix = OFF_MASK;
		reset();
	}
	
	public boolean suffixItrIsReset() {
		return _itrBucket.size()    == 0 &&
			       _itrBucketPos        == OFF_MASK &&
			       _itrPushedBackSuffix == OFF_MASK &&
			       isReset();
	}
	
	public TStr text() {
		return _text;
	}
	public TIndexOffU bucketSz() const { return _bucketSz; }
	public bool sanityCheck()  const { return _sanityCheck; }
	public bool verbose()      const { return _verbose; }
	public OutputStream log()      const { return _logger; }
	public size_t size()       const { return _text.length()+1; }
	
	protected void reset() {
		
	}
	
	protected boolean isReset() {
		
	}
	
	protected void nextBlock(int cur_block, int tid) {
		
	}
	
	protected boolean hasMoreBlocks() {
		
	}
	
	protected void verbose(String s) {
		if(this.verbose()) {
			this.log().write(s);
			this.log().flush();
		}
	}
}
