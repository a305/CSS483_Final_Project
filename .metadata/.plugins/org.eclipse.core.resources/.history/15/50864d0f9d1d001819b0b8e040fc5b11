package com.uwb.bt2j.util.strings;

public class SStringExpandable<T> {
	private int S, M, I;
	public SStringExpandable(int s, int m, int i) {
		S = s; M = m; I = i;
		cs_ = null;
		printcs_ = null;
		len_ = 0;
		sz_ = 0;
		if(i > 0) {
			expandNoCopy(i);
		}
	}
	
	public SStringExpandable(int s, int m, int i, double sz) {
		S = s; M = m; I = i;
		cs_ = null;
		printcs_ = null;
		len_ = 0;
		sz_ = 0;
		expandNoCopy(sz);
	}
	
	public SStringExpandable(int s, int m, int i, String str) {
		S = s; M = m; I = i;
		cs_ = null;
		printcs_ = null;
		len_ = 0;
		sz_ = 0;
		
		install(str, str.length());
	}
	
	public T windowGet(int i,
			boolean   fw,
			int depth,
			int len) {
		if(len == 0) len = len_;
		return fw ? cs_[depth+i] : cs_[depth+len-i-1];
	}
	
	public void windowGet(
			T ret,
			boolean   fw,
			int depth,
			int len) {
		if(len == 0) len = len_;
		for(int i = 0; i < len; i++) {
			ret.append(fw ? cs_[depth+i] : cs_[depth+len-i-1]);
		}
	}
	
	public void insert(T c, int idx) {
		if(sz_ < len_ + 1) expandCopy((len_ + 1 + S) * M);
		len_++;
		// Move everyone down by 1
		// len_ is the *new* length
		for(int i = len_; i > idx+1; i--) {
			cs_[i-1] = cs_[i-2];
		}
		cs_[idx] = c;
	}
	
	public void set(int c, int idx) {
		cs_[idx] = c;
	}
	
	public void append(T c) {
		if(sz_ < len_ + 1) expandCopy((len_ + 1 + S) * M);
		cs_[len_++] = c;
	}
	
	public void remove(int idx) {
		for(int i = idx; i < len_-1; i++) {
			cs_[i] = cs_[i+1];
		}
		len_--;
	}
}
