package com.uwb.bt2j.util.pattern;

import com.uwb.bt2j.aligner.Read;
import com.uwb.bt2j.util.EList;

import javafx.util.Pair;

public class RawPatternSource extends CFilePatternSource{
	private boolean first_;
	
	public RawPatternSource(PatternParams p, EList<String> infiles) {
		super(p, infiles);
		first_ = true;
	}

	public void reset() {
		super.reset();
		first_ = true;
	}
	
	protected Pair<Boolean, Integer> nextBatchFromFile(PerThreadReadBuf pt, boolean batch_a, int readi) {
		int c = getc_wrapper();
		while(c >= 0 && (c == '\n' || c == '\r')) {
			c = getc_wrapper();
		}
		EList<Read> readbuf = batch_a ? pt.bufa_ : pt.bufb_;
		// Read until we run out of input or until we've filled the buffer
		for(; readi < pt.max_buf_ && c >= 0; readi++) {
			readbuf[readi].readOrigBuf.clear();
			while(c >= 0 && c != '\n' && c != '\r') {
				readbuf[readi].readOrigBuf.append(c);
				c = getc_wrapper();
			}
			while(c >= 0 && (c == '\n' || c == '\r')) {
				c = getc_wrapper();
			}
		}
		// incase a valid character is consumed between batches
		if (c >= 0 && c != '\n' && c != '\r') {
			ungetc_wrapper(c);
		}
		return make_pair(c < 0, readi);
	}

	@Override
	protected void resetForNextFile() {
		first_ = true;
	}

	@Override
	public void nextBatch(PerThreadReadBuf pt, boolean batch_a, boolean lock) {
		// TODO Auto-generated method stub
		
	}

	public abstract boolean parse(Read ra, Read rb, long rdid);
	
}
