package com.uwb.bt2j.util.strings;

public class SDnaStringExpandable extends SStringExpandable<Character>{
	public SDnaStringExpandable() {
		super(1024, 2);
	}
	
	public SDnaStringExpandable(String str, boolean chars, boolean colors) {
		super(1024,2);
		if(chars) {
			if(colors) {
				installColors(str);
			} else {
				installChars(str);
			}
		} else {
			install(str);
		}
	}
	
	public SDnaStringExpandable(String b, double sz, boolean chars, boolean colors) {
		super(1024,2);
		if(chars) {
			if(colors) {
				installColors(b, sz);
			} else {
				installChars(b, sz);
			}
		} else {
			install(b, sz);
		}
	}
	
	public SDnaStringExpandable(String b, boolean chars, boolean colors) {
		super(1024,2);
		install(b, chars, colors);
	}
	
	public void installReverseComp(String b, int sz) {
		if(this.sz_ < sz) this.expandCopy((sz + 1024) * 2);
		for(int i = 0; i < sz; i++) {
			this.cs_[i] = (b[sz-i-1] == 4 ? 4 : b[sz-i-1] ^ 3);
		}
		this.len_ = sz;
	}
	
	public void reverseComp() {
		for(int i = 0; i < (this.len_ >> 1); i++) {
			char tmp1 = (this.cs_[i] == 4 ? 4 : this.cs_[i] ^ 3);
			char tmp2 = (this.cs_[this.len_-i-1] == 4 ? 4 : this.cs_[this.len_-i-1] ^ 3);
			this.cs_[i] = tmp2;
			this.cs_[this.len_-i-1] = tmp1;
		}
		// Do middle element iff there are an odd number
		if((this.len_ & 1) != 0) {
			char tmp = this.cs_[this.len_ >> 1];
			tmp = (tmp == 4 ? 4 : tmp ^ 3);
			this.cs_[this.len_ >> 1] = tmp;
		}
	}
	
	public void install(String b, boolean chars, boolean colors) {
		if(chars) {
			if(colors) {
				installColors(b, b.length());
			} else {
				installChars(b, b.length());
			}
		} else {
			install(b, b.length());
		}
	}
}
