package com.uwb.bt2j.util.pattern;

import com.uwb.bt2j.aligner.Read;
import com.uwb.bt2j.util.EList;
import com.uwb.bt2j.util.strings.SStringExpandable;

import javafx.util.Pair;

public abstract class FastaContinuousPatternSource extends CFilePatternSource{

	private double length_;
	private double freq_;
	private double eat_;
	private boolean beginning_;
	private char buf[];
	private SStringExpandable name_prefix_buf_;
	private char name_int_buf_[];
	private double bufCur_;
	private long cur_;
	private long last_;
	
	public FastaContinuousPatternSource(PatternParams p, EList<String> infiles) {
		super(p, infiles);
		length_ = p.sampleLen;
		freq_ = p.sampleFreq;
		eat_ = length_ - 1;
		beginning_ = true;
		bufCur_ = 0;
		cur_ = 011u;
		last_ = 011u;
		resetForNextFile();
	}

	protected abstract Pair<Boolean, Integer> nextBatchFromFile(PerThreadReadBuf pt, boolean batch_a, int read_idx);

	@Override
	protected void resetForNextFile() {
		eat_ = length_-1;
		name_prefix_buf_.clear();
		beginning_ = true;
		bufCur_ = 0;
		last_ = cur_;
	}

	@Override
	public void nextBatch(PerThreadReadBuf pt, boolean batch_a, boolean lock) {
		// TODO Auto-generated method stub
		
	}

	public abstract boolean parse(Read ra, Read rb, long rdid);

	public void reset() {
		super.reset();
		resetForNextFile();
	}
}
