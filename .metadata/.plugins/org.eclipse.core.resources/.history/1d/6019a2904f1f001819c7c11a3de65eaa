package com.uwb.bt2j.indexer;

import com.uwb.bt2j.util.Formats.FileFormat;
import com.uwb.bt2j.util.IndexTypes;
import com.uwb.bt2j.util.Tokenize;
import com.uwb.bt2j.util.types.EList;

public class Indexer {
	
	// Build parameters
	public int verbose;
	public static int sanityCheck;
	public static FileFormat format;
	public static long bmax;
	public static long bmaxMultSqrt;
	public static int bmaxDivN;
	public static int dcv;
	public static int noDc;
	public static int entireSA;
	public static int seed;
	public static int showVersion;
	//   Ebwt parameters
	public static int lineRate;
	public static int linesPerSide;
	public static int offRate;
	public static int ftabChars;
	public static int  bigEndian;
	public static boolean nsToAs;    // convert Ns to As
	public static boolean doSaFile;  // make a file with just the suffix array in it
	public static boolean doBwtFile; // make a file with just the BWT string in it
	public static boolean autoMem;
	public static boolean packed;
	public static boolean writeRef;
	public static boolean justRef;
	public static boolean reverseEach;
	public static int nthreads;
	public static String wrapper;
	
	public static void main(String[] args) {
		if(argc > 2 && strcmp(argv[1], "-A") == 0) {
			String file = args[2];
			ifstream in;
			in.open(file);
			String buf;
			int lastret = -1;
			while(in.getline(buf, 4095)) {
				EList<String> argz = new EList(9);
				argz.push_back(args[0]);
				buf = Tokenize.tokenize(" \t", args);
				for(int i = 0; i < args.length; i++) {
					argz.insert(args[i],i);
				}
				if(args.length == 1) continue;
				lastret = bowtie_build((int)args.length,argz);
			}
			if(lastret == -1) {
				System.err.println( "Warning: No arg strings parsed from " + file);
			}
		}
		bowtie_build(argc, argv);
	}
	
	public static void resetOptions() {
		verbose      = true;  // be talkative (default)
		sanityCheck  = 0;     // do slow sanity checks
		format       = FileFormat.FASTA; // input sequence format
		bmax         = IndexTypes.OFF_MASK; // max blockwise SA bucket size
		bmaxMultSqrt = IndexTypes.OFF_MASK; // same, as multplier of sqrt(n)
		bmaxDivN     = 4;          // same, as divisor of n
		dcv          = 1024;  // bwise SA difference-cover sample sz
		noDc         = 0;     // disable difference-cover sample
		entireSA     = 0;     // 1 = disable blockwise SA
		seed         = 0;     // srandom seed
		showVersion  = 0;     // just print version and quit?
		//   Ebwt parameters
		lineRate     = Ebwt.default_lineRate; // a "line" is 64 or 128 bytes
		linesPerSide = 1;  // 1 64-byte line on a side
		offRate      = 4;  // sample 1 out of 16 SA elts
		ftabChars    = 10; // 10 chars in initial lookup table
		bigEndian    = 0;  // little endian
		nsToAs       = false; // convert reference Ns to As prior to indexing
		doSaFile     = false; // make a file with just the suffix array in it
		doBwtFile    = false; // make a file with just the BWT string in it
		autoMem      = true;  // automatically adjust memory usage parameters
		packed       = false; //
		writeRef     = true;  // write compact reference to .3.gEbwt_ext/.4.gEbwt_ext
		justRef      = false; // *just* write compact reference, don't index
		reverseEach  = false;
	    nthreads     = 1;
		wrapper.clear();
	}
}
