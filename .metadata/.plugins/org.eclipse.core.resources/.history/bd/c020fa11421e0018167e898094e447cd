package com.uwb.bt2j.util.pattern;

import java.io.File;

import com.uwb.bt2j.aligner.Read;
import com.uwb.bt2j.util.EList;

public class CFilePatternSource extends PatternSource{
	public EList<String> infiles_;
	public ELIst<boolean> errs_;
	public double filecur_;
	public File fp_;
	public gzFile zfp_;
	public boolean is_open_;
	public double skip_;
	public boolean first_;
	public char buf_[];
	public boolean compressed_;
	
	public CFilePatternSource(PatternParams p,EList<String> infiles) {
		super(p);
		infiles_ = infiles;
		filecur_ = 0;
		fp_ = null;
		zfp_ = null;
		is_open_ = false;
		skip_ = p.skip;
		first_ = true;
		compressed_ = false;
		errs_.resize(infiles_.size());
		errs_.fill(0, infiles_.size(), false);
		open(); // open first file in the list
		filecur_++;
	}

	public Pair<Boolean, int> nextBatchFromFile(PerThreadReadBuf pt, boolean batch_a, int read_idx) {
		
	}
	
	private Pair<Boolean, int> nextBatchImpl(PerThreadReadBuf pt, boolean batch_a) {
		
	}
	
	public void resetForNextFile() {
			
	}
	
	public void open() {
		
	}
	
	public int getc_wrapper() {
		return gzgetc(zfp_);
	}
	
	public int ungetc_wrapper(int c) {
		return gzungetc(c, zfp_);
	}
	
	public boolean is_gzipped_file(String filename) {
		int pos = filename.lastIndexOf(".");
		String ext = (pos == -1) ? "" : filename.substring(pos + 1);
		if (ext == "" || ext == "gz" || ext == "Z") {
			return true;
		}
		return false;
	}

	@Override
	public void nextBatch(PerThreadReadBuf pt, boolean batch_a, boolean lock) {
	
	}

	@Override
	public boolean parse(Read ra, Read rb, long rdid) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void reset() {
		readCnt_ = 0;
		filecur_ = 0;
		open();
		filecur_++;
	}
}
