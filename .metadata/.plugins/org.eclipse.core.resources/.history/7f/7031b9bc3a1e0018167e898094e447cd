package com.uwb.bt2j.util.mapq;

import com.uwb.bt2j.aligner.AlignerFlags;
import com.uwb.bt2j.aligner.AlignerResult;
import com.uwb.bt2j.aligner.AlignmentSetSumm;
import com.uwb.bt2j.aligner.Scoring;
import com.uwb.bt2j.aligner.SimpleFunc;

public abstract class Mapq {
	public static final long unp_nosec_perf;
	public static final long unp_nosec[];
	public static final long unp_sec_perf[];
	public static final long unp_sec[][];
	public static final long pair_nosec_perf;
	protected SimpleFunc scoreMin_;
	protected Scoring sc_;
	
	public Mapq(SimpleFunc scoreMin, Scoring sc) {
		scoreMin_ = scoreMin;
		sc_ = sc;
	}
	
	public abstract long mapq(
			AlignmentSetSumm s,
			AlignerFlags flags,
			boolean mate1,
			double rdlen,
			double ordlen,
			String inps
			);
	
	public static boolean bestIsUnique(
			AlignmentSetSumm s,
			AlignerFlags flags,
			boolean mate1,
			double rdlen,
			double ordlen,
			String inps
			) {
		return !AlignerResult.VALID_AL_SCORE(s.bestUnchosenScore(mate1));
	}
	
	public static Mapq new_mapq(
			int version,
			SimpleFunc scoreMin,
			Scoring sc
			) {
		if(version == 3) {
			return new BowtieMapq3(scoreMin, sc);
		} else if(version == 2) {
			return new BowtieMapq2(scoreMin, sc);
		} else {
			return new BowtieMapq(scoreMin, sc);
		}
	}
}
