package com.uwb.bt2j.aligner.dp;
import com.uwb.bt2j.aligner.Edit;
import com.uwb.bt2j.aligner.RandomSource;
import com.uwb.bt2j.util.types.ELList;
import com.uwb.bt2j.util.types.EList;

import javafx.util.Pair;

class BtBranchTracer {
  protected BtBranchProblem prob_;
  protected EFactory<BtBranch> bs_;
  protected ELList<pair<double,double>> seenPaths_;
  protected ELSet<double> sawcell_;
  protected EList<pair<double,double>> unsorted_;
  protected EList<double> sorted1_;
  protected EList<double> sorted2_;
  protected EList<double> solutions_;
  protected Boolean sortedSel_;
  protected double cur_;
  protected double nmm_;
  protected double nnmm_;
  protected double nrdop_;
  protected double nrfop_;
  protected double nrdex_;
  protected double nrfex_;
  protected double nmmPrune_;
  protected double nnmmPrune_;
  protected double nrdopPrune_;
  protected double nrfopPrune_;
  protected double nrdexPrune_;
  protected double nrfexPrune_;
  protected double row_;
  protected double col_;
  protected Boolean doTri_;
  protected EList<CpQuad> sq_;
  protected EList<double> ndep_;
  protected ELList<CpQuad> tri_;

  public BtBranchTracer() {
    seenPaths_ = 6;
    sawCell_ = 6;
  }
  
  public void add(long id) {
	  unsorted_.push_back(new Pair(bs_[id].score_st_, id));
  }
  
  public void addSolution(long id) {
	  solutions_.push_back(id);
  }
  
  public void examineBranch(
		  long row,
			long col,
			Edit e,
			long pen,
			long sc,
			long parentId){
  
  }
  
  public void addOffshoots(long bid) {
    
  }
  
  public double best(RandomSource rnd) {
	  flushUnsorted();
		// Perhaps shuffle everyone who's tied for first?
		long id = sortedSel_ ? sorted1_[cur_] : sorted2_[cur_];
		cur_++;
		return id;
  }
  
  public boolean empty() {
    return size() == 0;
  }
  
  public double size() {
	  return unsorted_.size() +
		       (sortedSel_ ? sorted1_.size() : sorted2_.size()) - cur_;
  }
  
  public Boolean emptySolution() {
  
  }
  
  public double sizeSolution() {
  
  }
  
  public void flushUnsorted() {
    
  }
  
  public void initRef() {
    
  }
  
  public void initBt() {
    
  }
  
  public Boolean nextAlignment() {
    
  }
  
  public Boolean inited() {
  
  }
  
  public Boolean doTri() {
  
  }
  
  public void triangleFill() {
  
  }
  
  public void squareFill() {
  
  }
  
  protected Boolean nextAlignmentBacktrace() {
    
  }
  
  protected Boolean nextAlignmentFill() {
    
  }
  
  protected Boolean trySolutions() {
  
  }
  
  protected int trySolution() {
  
  }
}
