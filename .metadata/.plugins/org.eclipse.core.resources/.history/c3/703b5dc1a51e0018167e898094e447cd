package com.uwb.bt2j.aligner;

import com.uwb.bt2j.util.IndexTypes;

public class EbwtParams {
	public EbwtParams() {
		
	}
	
	public EbwtParams(
			long len,
			int lineRate,
			int offRate,
			int ftabChars,
			boolean color,
			boolean entireReverse){
		init(len, lineRate, offRate, ftabChars, color, entireReverse);
	}
	
	public EbwtParams(EbwtParams eh) {
		init(eh._len, eh._lineRate, eh._offRate,
			     eh._ftabChars, eh._color, eh._entireReverse);
	}
	
	public void init(
			long len,
			int lineRate,
			int offRate,
			int ftabChars,
			boolean color,
			boolean entireReverse) {
		_color = color;
		_entireReverse = entireReverse;
		_len = len;
		_bwtLen = _len + 1;
		_sz = (len+3)/4;
		_bwtSz = (len/4 + 1);
		_lineRate = lineRate;
		_origOffRate = offRate;
		_offRate = offRate;
		_offMask = IndexTypes.OFF_MASK << _offRate;
		_ftabChars = ftabChars;
		_eftabLen = _ftabChars*2;
		_eftabSz = _eftabLen*IndexTypes.OFF_SIZE;
		_ftabLen = (1 << (_ftabChars*2))+1;
		_ftabSz = _ftabLen*IndexTypes.OFF_SIZE;
		_offsLen = (_bwtLen + (1 << _offRate) - 1) >> _offRate;
		_offsSz = (long)_offsLen*IndexTypes.OFF_SIZE;
		_lineSz = 1 << _lineRate;
		_sideSz = _lineSz * 1 /* lines per side */;
		_sideBwtSz = _sideSz - IndexTypes.OFF_SIZE*4;
		_sideBwtLen = _sideBwtSz*4;
		_numSides = (_bwtSz+(_sideBwtSz)-1)/(_sideBwtSz);
		_numLines = _numSides * 1 /* lines per side */;
		_ebwtTotLen = _numSides * _sideSz;
		_ebwtTotSz = _ebwtTotLen;
	}
	
	long len()           { return _len; }
	long lenNucs()       { return _len + (_color ? 1 : 0); }
	long bwtLen()        { return _bwtLen; }
	long sz()            { return _sz; }
	long bwtSz()         { return _bwtSz; }
	int   lineRate()      { return _lineRate; }
	int   origOffRate()   { return _origOffRate; }
	int   offRate()       { return _offRate; }
	long offMask()       { return _offMask; }
	int   ftabChars()     { return _ftabChars; }
	int eftabLen()      { return _eftabLen; } 
	int eftabSz()       { return _eftabSz; } 
	long ftabLen()       { return _ftabLen; }
	long ftabSz()        { return _ftabSz; }
	long offsLen()       { return _offsLen; }
	long offsSz()        { return _offsSz; }
	int lineSz()        { return _lineSz; } 
	int sideSz()        { return _sideSz; } 
	int sideBwtSz()     { return _sideBwtSz; } 
	int sideBwtLen()    { return _sideBwtLen; } 
	long numSides()      { return _numSides; }
	long numLines()      { return _numLines; }
	long ebwtTotLen()    { return _ebwtTotLen; }
	long ebwtTotSz()     { return _ebwtTotSz; }
	boolean color()             { return _color; }
	boolean entireReverse()     { return _entireReverse; }
}
