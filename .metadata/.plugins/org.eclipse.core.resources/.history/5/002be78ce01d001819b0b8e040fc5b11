package com.uwb.bt2j.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;

public class FileBuf {
	public static boolean isnewline(int c){
		return c == '\r' || c == '\n';
	}
	
	public static boolean isspace_notnl(int c) {
		return isspace(c) && !isnewline(c);
	}
	
	public FileBuf() {
		init();
	}
	
	public FileBuf(File in) {
		init();
		_in = in;
	}
	
	public FileBuf(gzFile in) {
		init();
		_zIn = in;
	}
	
	public FileBuf(FileInputStream inf) {
		init();
		_inf = inf;
	}
	
	public FileBuf(InputStream ins) {
		init();
		_ins = ins;
	}
	
	public boolean isOpen() {
		return _in != null || _inf != null || _ins != null;
	}
	
	public void close() {
		if(_in != null && _ins != System.in) {
			fclose(_in);
		} else if(_inf != null) {
			_inf.close();
		} else if(_zIn != null) {
			gzclose(_zIn);
		}
	}
	
	public int get() {
		int c = peek();
		if(c != -1) {
			_cur++;
			if(_lastn_cur < LASTN_BUF_SZ) _lastn_buf[_lastn_cur++] = c;
		}
		return c;
	}
	
	public boolean eof() {
		return (_cur == _buf_sz) && _done;
	}
	
	public void newFile(File in) {
		_in = in;
		_zIn = null;
		_inf = null;
		_ins = null;
		_cur = BUF_SZ;
		_buf_sz = BUF_SZ;
		_done = false;
	}
	
	public void newFile(gzFile in) {
		_in = null;
		_zIn = in;
		_inf = null;
		_ins = null;
		_cur = BUF_SZ;
		_buf_sz = BUF_SZ;
		_done = false;
	}
	
	public void newFile(FileInputStream __inf) {
		_in = NULL;
		_zIn = NULL;
		_inf = __inf;
		_ins = NULL;
		_cur = BUF_SZ;
		_buf_sz = BUF_SZ;
		_done = false;
	}
	
	public void newFile(InputStream __ins) {
		_in = NULL;
		_zIn = NULL;
		_inf = NULL;
		_ins = __ins;
		_cur = BUF_SZ;
		_buf_sz = BUF_SZ;
		_done = false;
	}
}
